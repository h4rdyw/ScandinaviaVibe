{% comment %}theme-check-disable{% endcomment %}
{% assign cardwidth = settings.card_img_width_horizontal %}
{% assign cardheight = settings.card_img_height_horizontal %}
{% assign current_product = product.selected_or_first_available_variant %} 
{% assign product_image = current_product.featured_image | default: product.featured_image %}
{% assign section_id = product.handle %}
{% assign producttag = product.metafields.badge.badge1 %}

{% if section.settings.col_reverse == true %}
  {% assign col_reverse = '-reverse' %}  
{% endif %}
{% assign prdrecomm = section.settings.show_prd_recomm %}
{% assign producthandle = section.settings.product_handle %}
{% assign showprdrecomm = true %}
{% if product.handle == producthandle %}
    {% if prdrecomm == true %}
      {% assign showprdrecomm = true %}
    {% else %}
      {% assign showprdrecomm = false %}
    {% endif %}
{% else %}
     {% if section.settings.product_handle != blank %}
      {% else %}        
        {% assign showprdrecomm = section.settings.show_prd_recomm %}   
     {% endif %}
{% endif %} 

    {% for tag in product.tags %}
       {% if tag contains 'Special' %}
        {% assign specialbox = 'true' %}
      {% endif %}    
      {% if tag contains 'Award' %}
          {% assign awardbox = 'true' %}
      {% endif %}
      {% if tag contains 'Final Sale' %}
        {% assign finalsale = 'true' %}
       {% endif %}
    {% endfor %}

    

<section class="container py-5" id="product_details">
  {% include 'breadcrumbs' %}
  <p span></p>
    <div class="row flex-column{{ col_reverse }} flex-lg-row">
        <div class="d-flex flex-column col-lg-8 col-md-12 col-12">
            
              <div class="d-flex flex-fill swiper-container swiper-container-{{- product.id -}}">
                <div class="swiper-wrapper flex-fill">
                  {% if product.images.size > 1  %}
                    {% assign imgnum = 'true' %}
                  {% endif %}                

                  {% for image in product.images %}            
                    <div variant-img-id="{{ image.id }}" class="swiper-slide" variant-id="">
                      <img src="{{ image.src | img_url : 'master' }}" alt="{{ image.alt | escape }}" width="480px" height="480px" loading="lazy"/>

                      {% if imgnum == 'true' %}                       
                      
                      <div class="swiper-button-prev swiper-button-prev-{{- product.id -}}"></div>                     
                      <div class="swiper-button-next swiper-button-next-{{- product.id -}}"></div>

                      {% endif %}

                    </div>          
                  {% endfor %}    
                </div>
              </div>
              <p span class="text-line"></p>
              {% comment %} <!--<div class="text-product-desc"><p>{% render 'product-description' ,product:product, type: 'long' %}</p></div>--> {% endcomment %}

             <div class="w-100 mx-auto my-1">
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                  <li class="nav-item" role="presentation">
                    <button class="nav-link nav-link-prd active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">Description</button>
                  </li>                                
                  <li class="nav-item" role="presentation">
                    <button class="nav-link nav-link-prd" id="media-tab" data-bs-toggle="tab" data-bs-target="#media" type="button" role="tab" aria-controls="media" aria-selected="false">Media</button>
                  </li>                 
                  <li class="nav-item" role="presentation">
                    <button class="nav-link nav-link-prd" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab" aria-controls="info" aria-selected="false">Info</button>
                  </li>
                </ul>
                <div class="tab-content" id="myTabContent">
                  <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                    <div class="text-product-desc"><p>{% render 'product-description' ,product:product, type: 'long' %}</p></div> 
                  </div>
                  <div class="tab-pane fade" id="media" role="tabpanel" aria-labelledby="media-tab">
                    <div class="container px-0 mx-auto">
                      <div class="d-flex g-3 row row-cols row-cols-xxl-2 row-cols-lg-2 row-cols-md-2 row-cols-1 align-items-center">
                      {% render 'product-video', product:product %}      
                      </div>
                    </div>        
                    </div>
                  <div class="tab-pane fade" id="info" role="tabpanel" aria-labelledby="info-tab"><div class="text-product-desc">
                  {% if section.settings.subtitle != blank %}
                  <div class="text-header-title"><p>{{ section.settings.subtitle }}</p></div>
                  {% endif %}
                  {% if section.settings.subinfo != blank %} 
                  <div class="py-2"><p>{{ section.settings.subinfo }}</p></div>    
                  {% endif %}                  
                  {% if section.settings.subinfo_img != blank %}
                  <div class-"py-2"><img src="{{ section.settings.subinfo_img | img_url : 'master' }}" alt="{{ image.alt | escape }}" width="400" height="400" loading="lazy"/></div> 
                  {% endif %}
                  {% if section.settings.subinfo_img1 != blank %}                  
                  <div class-"py-2"><img src="{{ section.settings.subinfo_img1 | img_url : 'master' }}" alt="{{ image.alt | escape }}" width="400" height="400" loading="lazy"/></div> 
                  {% endif %}    
                  {% if section.settings.subinfo_url != blank %}                  
                  <div class="py-2"><a href="{{ section.settings.subinfo_url }}" target="_blank">{{ section.settings.subinfo_url_title }}</a>
                </div> 
                  {% endif %}         
                </div></div>
                </div>
              </div>             
        </div>
        
        <div class="d-flex flex-column col-lg-4 col-md-12 col-12">
          <h1 class="text-product-detail-title">{{ product.title }}
          {% if producttag != blank %}
            <span class="badge rounded-0 badge-text">{{ producttag }}</span>              
        {% endif %} 
        </h1>
            
          <div class="px-0 pb-2 mx-0 d-flex flex-row">
            {% if specialbox == 'true' %}      
                   {% assign specialbox = 'false' %}              
                   {% assign iconstyle = 'style="position:relative;left:1px;"' %} 
                   <svg class="star-badge px-0 mx-0" style="position:relative;left:0px !important;">{% render 'star-badge' %}</svg>  
            {% else %}
                   {% assign iconstyle = 'style="position:relative;margin:auto;transform:translateX(-40px);"' %} 
            {% endif %} 

            {% if awardbox == 'true' %}    
                {% assign awardbox = 'false' %}                
                <svg class="award-badge px-0 mx-0" {{ iconstyle }}>{% render 'award-badge' %}</svg>  
            {% endif %} 
            </div>          

            {% if finalsale == 'true' %}
              <p id="final-sale" class="text-header-title">FINAL SALE*</p>            
            {% endif %}

            <p id="prd-price" class="text-header-title" style="line-height:2.5rem;">
              {% if product.compare_at_price_max > 0 %}
                {% render 'discount', product : product %}<svg class="tag-badge">{% render 'tag-badge' %} </svg>
                <del><span style="color: #AB0000;">{{ product.compare_at_price_max | money_without_trailing_zeros }}</span></del>
              
              {% endif %}

              
              {% if product.price_varies %} from {{ product.price_min | money_without_trailing_zeros }} {% else %} {{ product.price | money_without_trailing_zeros }} {% endif %}
            </p>
            {% if section.settings.show_short_description == true %}       
            <div class="text-product-desc"><p>{% render 'product-description' ,product:product, type: 'short' %}</p></div>            
            {% endif %}

            {% if section.settings.subtitle != blank %}       
            <div class="text-header-title"><p>{{ section.settings.subtitle }}</p></div>
            
            {% endif %}
           <form action="#" id="addToCartFormTmpl" class="row mx-auto">

              {% assign availability_count = 0 %}    

                <div id="selectOptions" class="mb-3">
                  {% if product.has_only_default_variant %}
                    <input name="id" id="productSelect" value="{{ product.first_available_variant.id }}" type="hidden">
                    {% for variant in product.variants %}
                      {% if variant.available %}
                          {% assign availability = availability_count | plus: 1 %}
                      {% endif %}    
                    {% endfor %}

                  {% else %}

                    <select name="id" id="productSelect" class="form-select">

                        {% for variant in product.variants %}
                            {% if variant.available %}
                                {% assign availability = availability_count | plus: 1 %}
                                {% if variant.compare_at_price > 0 and variant.compare_at_price > variant.price %}
                                  {% assign priceold = variant.compare_at_price | money_without_trailing_zeros  %}
                                  {% assign pricenew = variant.price | money_without_trailing_zeros  %}
                                  {% assign desc = variant.title | append : ' - ( was ' | append : priceold  | append : ' ) now ' | append : pricenew %}
                                {% else %}
                                  {% assign pricenew = variant.price | money_without_trailing_zeros  %}
                                  {% assign desc = variant.title | append : ' ' | append : pricenew %}
                                {% endif %}
                          {% assign availability = availability_count | plus: 1 %}
                                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ desc }}</option>
                            {% else %}
                                <option value="{{ variant.id }}" disabled="disabled"> {{ variant.title }}</option>
                            {% endif %}                       
                        {% endfor %}
                    </select>
                  {% endif %}  
                </div>
                
                {% comment %} <div id="qty-part" class="row row-cols-2 mb-3">
                  <div class="col text-end">
                  Quantity
                  </div>
                  <div class="col">
                    <input type="number" class="form-control form-inline" name="quantity" id="Quantity" value="1" min="1">
                  </div>                  
                </div> {% endcomment %}

                {% comment %} <ul id="qty-part" class="list-inline mb-4">
                  <li class="list-inline-item me-3"><strong>Quantity</strong></li>
                  <li class="list-inline-item">
                    <div class="border d-flex align-items-center justify-content-between p-1">
                      <div class="quantity py-0">
                        <button class="dec-btn p-0" onclick="event.preventDefault();decrease(this)" aria-label="Button Decrease Quantity"><i class="fas fa-caret-left"></i></button>
                        <input class="form-control border-0 shadow-0 p-0 quantity-result" type="text" name="quantity" id="Quantity" value="1" aria-label="Quantity" style="font-weight:600;" >
                        <button class="inc-btn p-0" onclick="event.preventDefault();increase(this)" aria-label="Button Increase Quantity"><i class="fas fa-caret-right"></i></button>
                      </div>
                    </div>
                  </li>
                </ul>  
                <p></p>
                <button type="submit" name="add" id="AddToCart" class="btn-add-to-cart w-100" {% unless availability > 0 %} disabled="disabled" >Sold Out {% else %} >Add to Cart {% endunless %}</button>
                <p></p> {% endcomment %}
                <ul id="qty-part" class="list-inline mb-4">
                  <li class="list-inline-item me-3"><strong>Quantity</strong></li>
                  <li class="list-inline-item">
                    <div class="border d-flex align-items-center justify-content-between p-1">
                      <div class="quantity py-0">
                        <button class="dec-btn p-0" onclick="event.preventDefault();decrease(this)" aria-label="Button Decrease Quantity"><i class="fas fa-caret-left"></i></button>
                        <input class="form-control border-0 shadow-0 p-0 quantity-result" type="text" name="quantity" id="fmItemQuantity" value="1" aria-label="Quantity" style="font-weight:600;" >
                        <button class="inc-btn p-0" onclick="event.preventDefault();increase(this)" aria-label="Button Increase Quantity"><i class="fas fa-caret-right"></i></button>
                      </div>
                    </div>
                  </li>
                </ul>  
                <p></p>
                <button type="submit" id="btnAddToCartForm" class="btn-add-to-cart w-100" {% unless availability > 0 %} disabled="disabled" >Sold Out {% else %} >Add to Cart {% endunless %}</button>
                <p></p>
            </form>

                  

                {% comment %} {% if section.settings.dynamic_button_checkbox == true %}
                  {% if availability > 0 %} 
                  {% form 'product', product, class:"product-form", id:"AddToCartForm" %} 
                  {{ form  | payment_button }}           
                  {% endform %}
                  {% endif %}
                {% endif%}
                 {% endcomment %}


  
              {% if product.metafields.related.size > 0 %}
                 <div class="w-100 pt-5"><h2>{{ section.settings.subtitle_relatedprd }}</h2></div> 

                 <div class="row row-cols-1">

                  {% for item in product.metafields.related %}
                    {% assign prd = item | last %}
                    {% assign _product = prd.value %}

                    {% render 'prdcard-related' , product: _product , section_id : section_id , cardwidth : cardwidth , cardheight : cardheight %} 
                   
                  {% endfor %}
                </div>
                
              {% endif %}
          </div>
      </div>
</section>


{% render 'prd-modal' %}

{% schema %}
{
    "name": "Product Details",
    "settings": [
    {
        "type": "checkbox",
        "id": "dynamic_button_checkbox",
        "label": "Enable Dynamic Buy Button",
        "default": false
    },
    {
      "type": "header",
      "content": "Product Recommendations"
    },
    {
      "type": "checkbox",
      "id": "show_prd_recomm",
      "label": "Show Product Recommendations",
      "default": true
    },
    {
      "type": "product",
      "id": "product_handle",
      "label": "Set NONE If recomm = F & recomm section is NOT set"
    },
    {
      "type": "checkbox",
      "id": "init_wishlist",
      "label": "Wishlist Button/Icon",
      "info": "Use when no recommendation section is set",
      "default": false
    },
    
    {
      "type": "checkbox",
      "id": "col_reverse",
      "label": "Reverse Column on Small Screen",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_short_description",
      "label": "Show Short Description",
      "default": false
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Sub Heading Info"      
    },
    {
      "type": "richtext",
      "id": "subinfo",
      "label": "Additional Info"      
    },
    {
      "type": "image_picker",
      "id": "subinfo_img",
      "label": "Additional Info - Img"      
    },
    {
      "type": "image_picker",
      "id": "subinfo_img1",
      "label": "Additional Info - Img"      
    },
    {
      "type": "url",
      "id": "subinfo_url",
      "label": "Download Link"      
    },
    {
      "type": "text",
      "id": "subinfo_url_title",
      "label": "Download Link Title",
      "default": "Download The File"      
    },
    {
      "type": "text",
      "id": "subtitle_relatedprd",
      "label": "Heading for Related Product"      
    }   
  ]  
}
{% endschema %}
<style scoped>
  input {
    border-left: none !important;
    border-right: none !important;
    border-top: none !important;
    border-bottom: 1px solid #ced4da !important;
  }
  
  .form-select {
      border-left: none;
      border-right: none;
      border-top: none;
  }  

  .form-control {
  display: block;
  width: 100%;
  padding: .375rem .75rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 2 !important;
  /*color: #212529;*/
  background-color: transparent !important;
  background-clip: padding-box;
  border: 1px solid #ced4da;*/
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 0 !important;
  transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}
  .wishlist-badgeleft {  
    opacity: 1;  
    width: 32px;
    height: 32px;
    padding-left: 1px;
    padding-right: 1px;
    position: absolute;
    bottom: 1px;
    left: 5px;
    border:none;
    background-color: transparent;
    transition: 0.15s;
    fill: transparent;
    stroke: #000;
    transition: fill 0.3s ease;
  }

  .icon {
    height: 30px;
    width: 30px;
    fill: transparent;
    stroke: #11171B;
    transition: fill 0.3s ease;
  }

  .active .icon {
    fill: #F652A0;
    stroke: transparent;
  }

  .snippet-wishlist {
    position: relative;
    padding-top: 10px;
    padding-bottom: 10px;
  }  

  
</style>

{% comment %} {% render 'prd-recommendation' %} {% endcomment %}

<script>  
window.addEventListener('load', 
  function() { 
    checkLocaleBtn();         

    const element = document.querySelector('#productSelect') || false;    
    if (element) {
      let changeEvent = new Event('change');    
       element.dispatchEvent(changeEvent);
    }


  }, false);       

/* dispatch wishlist when related-prd ready*/
document.addEventListener('DOMContentLoaded', function() {
  let myRelatedEvent = new CustomEvent('dispatchRelatedPrd', {
    bubbles: true,
    cancelable: true
    });
  
  setTimeout(()=>{
    //console.log('Distpatching..');
    document.dispatchEvent(myRelatedEvent);     
  },2)
  clearTimeout(); 

  resetBadgelist();
  
  {% comment %} document.addEventListener( 'dispatchMeta', function ( event ) {
    getMeta();
  }); {% endcomment %}
  
})

var PrdbadgeList = [];

{% comment %} /* LOCAL STORAGE*/ {% endcomment %}

var LOCAL_STORAGE_BADGE_KEY = 'prd-badge';
var LOCAL_STORAGE_BADGE_DELIMITER = ',';

var getBadgelist = function () {
  var badgelist = localStorage.getItem(LOCAL_STORAGE_BADGE_KEY) || false;
  //console.log(badgelist);
  if (badgelist) return badgelist.split(LOCAL_STORAGE_BADGE_DELIMITER);
  return [];
};

var setBadgelist = function (array) {
  var badgelist = array.join(LOCAL_STORAGE_BADGE_DELIMITER);
  if (array.length) localStorage.setItem(LOCAL_STORAGE_BADGE_KEY, badgelist);
  else localStorage.removeItem(LOCAL_STORAGE_BADGE_KEY);

  var event = new CustomEvent('badgelist:updated', {
    detail: { badgelist: array },
  });
  document.dispatchEvent(event);

  return badgelist;
};

var updateBadgelist = function (handle) {
  //console.log(handle);
  var badgelist = getBadgelist();
  var indexInBadgelist = badgelist.indexOf(handle);
  if (indexInBadgelist === -1) badgelist.push(handle);
  //else badgelist.splice(indexInBadgelist, 1);
  return setBadgelist(badgelist);
};

var badgelistContains = function (handle) {
  var badgelist = getBadgelist();
  return badgelist.indexOf(handle) !== -1;
};

var resetBadgelist = function () {
  return setBadgelist([]);
};


//=================//


const json_product = {{ product | json }};
//console.log(json_product);   

const swiper = new Swiper(".swiper-container-{{- product.id -}}", {
    slidesPerView: 1,
    centeredSlides: true,
    effect: "fade",
    fadeEffect: { crossFade: true },
    loop: true,
    observer: true, 
    observeParents: true,  
    navigation: {
      prevEl: ".swiper-button-prev-{{- product.id -}}",
      nextEl: ".swiper-button-next-{{- product.id -}}"
    }    
  })

  {% comment %} 
  swiper.on('slideChange', function () {
    let slideIndex = this.activeIndex 
    console.log("Index : " + slideIndex);     
    let attributeName = document.querySelectorAll(`[data-swiper-slide-index='${slideIndex}']`);     
    attributeName.forEach( e => {
      //console.log(e.attributes);
      let variantimgid = e.attributes['variant-img-id'].value;
      //console.log(variantimgid);      
      const arrresult = json_product.variants.map(e => e.featured_image);
      //console.log(arrresult);
      const varidresult = arrresult.find( ({ id }) => id === +variantimgid );
      //console.log(varidresult);
      const variant_id=varidresult.variant_ids[0];
      //console.log(variant_id);
      document.getElementById('productSelect').value = variant_id

    })
  });
  {% endcomment %}
  
  {% if showprdrecomm == true %}
  
    getRecomms();
  
  {% else %}

      var wishlistSnippet =  document.createElement('div');   
      wishlistSnippet.className = 'snippet-wishlist';
    
      wishlistcard = `<button type="button" aria-label="Add to wishlist" class="wishlist-badge" style="left:0;bottom:0;" button-wishlist data-product-handle="{{product.handle}}"><svg class="icon">{% render 'heart-badge' %}</svg></button>`;     
         
      wishlistSnippet.innerHTML = wishlistcard;
    
      const referenceForWishlist = document.getElementById("qty-part");        
      referenceForWishlist.after(wishlistSnippet);
        
      // when related prd ready      
          
      //console.log('showprdrecomm '+ {{showprdrecomm}} );
      //console.log('initbuttons');
      {% unless section.settings.product_handle %}

          initButtons();      

      {% elsif section.settings.init_wishlist %}

          initButtons();      

      {% endunless %}

        

  {% endif %}



/* Listen to Related Prd*/
document.addEventListener( 'dispatchRelatedPrd', function ( event ) {
    initButtons();
  });

     function formatCcy(amount) {
        var ccyTemp = parseFloat(amount).toLocaleString('en-US', {
          style: 'currency',
          currency: 'USD',
        });
      
        //remove trailing zeros
        var ccyFormated =
          ccyTemp.slice(-3) === '.00'
            ? ccyTemp.slice(0, -3)
            : ccyTemp.slice(-1) === '0'
            ? ccyTemp.slice(0, -1)
            : ccyTemp;
        return ccyFormated;
      }
    
    const SelectElement = document.getElementById("productSelect") || false ; 
   
    //const checkValue = SelectElement.options[SelectElement.selectedIndex].value;
    //const checkText = SelectElement.options[SelectElement.selectedIndex].text;
    if (SelectElement) {
    SelectElement.addEventListener("click", (e) => varSelectChange(e) );
    SelectElement.addEventListener("change", (e) => varSelectChange(e) );
    SelectElement.addEventListener("focus", (e) => varSelectChange(e) );
    }
 
  function varSelectChange (e) {
    const value = e.target.value;
    //const text = SelectElement.options[SelectElement.selectedIndex].text;
    if (value) {

    const variantresult = json_product.variants.find( ({ id }) => id === +value );
    //console.log(variantresult);
    let variant_img_id = (variantresult.featured_image === null) ? false : variantresult.featured_image.id ;  
        //document.getElementById("pick").textContent = `Value Selected: ${value} ${text}`;
        //console.log(variantresult);
        const curr_price = +variantresult.price/100;
        const variantPrice = formatCcy((+variantresult.price / 100));    
        const compare_price = +variantresult.compare_at_price/100;                
        const variantComparePrice = formatCcy((+variantresult.compare_at_price / 100));
        const savings = ((+(compare_price-curr_price)/compare_price) * 100).toFixed(0);               
        if (+variantresult.compare_at_price > 0 && +variantresult.compare_at_price > +variantresult.price ) { 
          var pricetag=`${savings}% <svg class="tag-badge">{% render 'tag-badge' %} </svg>
          <del><span style="color: #AB0000;">${variantComparePrice}</span></del> ${variantPrice}`;
        } else { 
          var pricetag=`${variantPrice}`;
        } 

        document.getElementById("prd-price").innerHTML = pricetag ; 

        if (variant_img_id ) {
          let variantimg = document.querySelector(`[variant-img-id='${variant_img_id}']`); 
          if ( variantimg ){
            //console.log(variantimg);
            let variantimgindex = +variantimg.getAttribute('data-swiper-slide-index');
            // +1 for swiperjs
            variantimgindex += 1;           
            //console.log(variantimgindex);
            swiper.slideTo(variantimgindex);
            swiper.update();
          }
        }            
        
    } else {
        //document.getElementById("pick").textContent = "";
    }   
  };

function increase(x) {
    
    var inputVal = x.previousElementSibling;
    inputVal.value++;
}
function decrease(x) {
    var inputVal = x.nextElementSibling;
    if (inputVal.value > 1) {
        inputVal.value--;
    }
}

function getCurrPrdMeta() {
  console.log('get metas...');

  var custom_products = []
 {% for item in product.metafields.related %}
  {% assign add_handle = item | last %}
  var object = {}
  object.name = "{{ item | last }}"
  object.price = "{{ all_products[add_handle].price | money_without_currency }}"
  object.title = "{{ all_products[add_handle].title }}"
  object.image = "{{ all_products[add_handle].featured_image | img_url }}"
  object.id = "{{ all_products[add_handle].id }}"
  object.active = false
  object.product_class =  "line_item"
  custom_products.push(object)
 {% endfor %}
  console.log(custom_products);
}

//adminapi
function getMeta(prd) {
  //https://scandinaviavibe.myshopify.com/admin/products/6924604801204/metafields.json
  //console.log(prd);
  if (!prd) return false;
  fetch(`/admin/products/${prd}/metafields.json`)
    .then(resp => resp.json())
    .then(({ metafields }) =>{
      console.log('meta');
        console.log(metafields);       
        var arrMeta = Array.from(metafields);
        //console.log(arrMeta);

        arrMeta.map(function (meta) {
          if (meta.namespace == "badge") {
            console.log(meta.id + ' : ' +  meta.value );
            return meta.value
    
          } else {
            return null
          }
        })
    
    });   

  } 

  const getMetaStoreFront = (productId) => {
    if (!productId) return false;

    const query2 = 
    `query SpecificProduct($id: ID!) {
      node(id: $id) {
          id
          ... on Product {
              title
              description
              id
              handle
          }
        }
      }`;

    const params = {
        query: query2,
        variables: { id: productId }
    };

    const query1 = `query FirstProduct {
      products(first:1) {
          edges {
              node {
                  id
                  title
                  description
                  variants(first:1) {
                      edges {
                          node {
                              title
                              id
                              priceV2 {
                                  amount
                                  currencyCode
                              }
                          }
                      }
                  }
              }
          }
      }   
  }`;
    const optionsQuery2 = {
        method: "post",
        headers: {
        "Content-Type": "application/json",
        "Access-Control-Origin": "*",
        "X-Shopify-Storefront-Access-Token": "9270c774b25bf530d8570de613a325ca"
        },
        body: JSON.stringify(params)
    };

    fetch(`scandinaviavibe.myshopify.com/api/graphql`, optionsQuery2)
        .then(res => res.json())
        .then(response => {  
            console.log("=============== Fetch Specific Product ===============");
            console.log(JSON.stringify(response, null, 4)); 
        });        
}


 {% assign shop_url = shop.url %}
 {% assign shop_url_ = shop_url | split : '//' %}
 {% assign shop_url_split = shop_url_[1] %}
 var shopUrl = "{{ shop_url_split }}";
 //console.log(shopUrl); 
 /* storefront api call*/
  function apiCall(prd) {  
 
    var prdID = `gid://shopify/Product/${prd}`;
    const query2 = `query SpecificProduct($id: ID!) {
      node(id: $id) {
          id
          ... on Product {
              title
              description
              id
              handle
              badge: metafield(namespace: "badge", key: "badge1"){
                  value
              }                 
          }
        }
      }`;

    const params = {
        query: query2,
        variables: { id: prdID }
    };

    return fetch(`https://${shopUrl}/api/graphql.json`, 
        { method: 'POST', 
            headers: { 'Content-Type': 'application/json', 
                       "Access-Control-Origin": "*", 
                       'X-Shopify-Storefront-Access-Token': "9270c774b25bf530d8570de613a325ca" 
                     },
            "body": JSON.stringify(params) })
            .then(response => response.json())
            .then(function(products) {
              //console.log(product);
              var Node =  products.data.node;             
              console.log(Node)
              const prdbadge = Node.badge ? Node.badge.value : false;
              console.log(prdbadge);              
              return prdbadge;
            });
  }
    
  function findIndexOfNestedArray(nestedArray, searchArray) {
    return searchArray.findIndex(item => {
      return item.length === nestedArray.length
      && item.every((a, i) => a === nestedArray[i])
    })
  }

/* get product recommendations*/
async function getRecomms() {
  var PrdbadgeList2 = [];
  var prdCopy;
  var prdArr=[];
  fetch(`/recommendations/products.json?product_id={{ product.id }}`)
    .then(resp => resp.json())
    .then(({ products }) => {        
      
        var arrProducts = Array.from(products);        
        
        //console.log(arrProducts);
        let promises = arrProducts.map((prd) => {
        //console.log(prd);

            let  prdID = `gid://shopify/Product/${prd.id}`;
                  const query2 = `query SpecificProduct($id: ID!) {
                    node(id: $id) {
                        id
                        ... on Product {
                            title
                            description
                            id
                            handle
                            badge: metafield(namespace: "badge", key: "badge1"){
                                value
                            }                 
                        }
                      }
                    }`;

            const params = {
                  query: query2,
                  variables: { id: prdID }
              };

            return fetch(`https://${shopUrl}/api/graphql.json`, 
                { method: 'POST', 
                    headers: { 'Content-Type': 'application/json', 
                              "Access-Control-Origin": "*", 
                              'X-Shopify-Storefront-Access-Token': "9270c774b25bf530d8570de613a325ca" 
                            },
                    "body": JSON.stringify(params) })
                    .then(response => response.json())
                    .then(function(products_badge) {
                      //console.log(products_badge);
                      prdCopy = prd;

                      //add product to product array and add key badge
                      prdArr.push(prd);
                      //console.log('Product : '+prd.id);
                      prdCopy.badge = products_badge.data.node.badge ? products_badge.data.node.badge.value : '';
                      //console.log(prdCopy);

                      let Node =  products_badge.data.node;                               
                      //console.log(Node)
                      //let prdbadge = Node.badge ? Node.badge.value : false;
                      let prdbadge = Node.badge ? Node.badge.value : '';
                      //console.log(prdbadge);    
                      PrdbadgeList2.push({id: prd.id,badge: prdbadge});              
                    })                
        })
        return Promise.all(promises)
                .then(() => { });
        console.log(promises);        
            
    })
    .then( () => {     
       
        //console.log(PrdbadgeList2);
        //console.log(prdCopy);
        //console.log(prdArr);

        if(prdArr.length > 0) {
          
            /* element 
                <div class="container">
                    <section id="product_recommendation" class="row content-justify-center my-5">
                        <div class="text-center"><h1>Also in store</h1></div>
                        <div class="row d-flex g-3 row-cols-lg-6 row-cols-md-4 row-cols-sm-3 row-cols-2 py-2" id="product_recommendation_body"></div>
                    </section>
                </div>
            */
    
            const htmlMarkup = `
                 <section id="product_recommendation" class="content-justify-center my-5">
                    <div class="text-center"><h1>You'll love this too</h1></div>
                    <div class="d-flex flex-wrap g-3 row row-cols row-cols-xl-5 row-cols-lg-4 row-cols-md-3 row-cols-sm-3 row-cols-2 py-2" id="product_recommendation_body">
            `;
    
            html = htmlMarkup.trim();
            var productRecomm = document.createElement('div');
            productRecomm.className = 'container';
            
            prdArr.forEach(function(item,index) {
    
              //console.log(item);
              let productUrl;
              let substrings = item.url.split('products');
              //console.log(substrings);
              let local = Shopify.locale;
              if (local == 'en') {
                productUrl = item.url
              } else {
                productUrl = `https://${shopUrl}${substrings[0]}${local}/products/${substrings[1]}`;
              }
              

              document.addEventListener( 'dispatchPrd', function ( event ) {
                //console.log(`registering productInfoAnchor ${el.id}`);
                getProductAnchors(`productInfoAnchor-${item.id}`);
              });         
              
              if (+item.compare_at_price > 0 && +item.compare_at_price > +item.price ) { 
                const itemsavings = (((+item.compare_at_price-item.price)/item.compare_at_price) * 100).toFixed(0);
                //console.log("Item Saving :" + itemsavings);
      
                var savingspct=`${itemsavings}%`;  
              } else {
                var savingspct=``;  
              }
      
              let prdPrice = formatCcy((+item.price / 100));                   
              let prdPriceMin = formatCcy((+item.price_min / 100));                   
              let prdComparePrice = formatCcy((+item.compare_at_price_max / 100));                   
              let from = '';
              let finalsaletag = '';
      
              if (item.price_varies) from = `from `;
      
              if (item.tags.includes('Final Sale')) finalsaletag = 'FINAL SALE*'; 
      
              var card, iconstyle;
      
              card = `<div class="col d-flex">`;
              card += `<div class="img-wrapper d-flex">`;
              card += `<div class="card d-flex flex-fill border-0 shadow-sm">`;
      
              if(item.images.length > 0) {
                  card += `<div class="inner-img">`;
                  card += `<a href="javascript:;"   id="productInfoAnchor-${item.id}" product-handle="${item.handle}"  product-badge="${item.badge}" 
                          product-price="${from} ${prdPrice}"><img class="card-img-top" width="240" height="240" src="${item.images[0]}" loading="lazy" alt="${item.title}"></a>`;
                  
                  if (item.available) {                
                  card += `<div class="text-hover"><svg class="heart-badge" alt="quick shop">{% render 'icon-bag' %}</svg></br>QUICK SHOP</div></div>`    
                  } else {
                  card += `<div class="text-hover">SOLD OUT</div></div>`;
                  }       
              }          
              card += `<div class="card-body d-flex flex-column justify-content-end text-center bg-light pb-1">`;
              card += `<p class="text-product-title"><a class="text-product-link" href="${productUrl}">${item.title}</a></p>`;
              card += `<p span class="text-line"></p>`;
      
              if (item.compare_at_price_max > 0 ) { 
      
                card += `<p>${finalsaletag} ${savingspct}<svg class="tag-badge">{% render 'tag-badge' %} </svg>
                  <del><span style="color: #AB0000;">${prdComparePrice}</span></del> ${from} ${prdPrice}</p>`;
      
                
              } else {
                card += `<p>${from} ${prdPriceMin}</p>`;     
              }
              
              card += `<button type="button" aria-label="Add to wishlist" class="wishlist-badgeleft" button-wishlist btn-from-template data-product-handle="${item.handle}"><svg class="icon">{% render 'heart-badge' %}</svg></button>`;
      
              if (item.tags.includes('Special')) {
                card += `<div><svg class="star-badge">{% render 'star-badge' %}</svg></div>`; 
                iconstyle = ``;
      
              } else {
                iconstyle = `style="transform: translateX(-35px);"`;
              }
      
              if (item.tags.includes('Award')) {
                card += `<div><svg class="award-badge" ${iconstyle}>{% render 'award-badge' %}</svg></div>`; 
              }
            
              card += `<span class="badge rounded-0 badge-text-topright">${item.badge}</span>`;                     
                      
              card += `</div></div></div></div>`;
              
              html += card;                           
      
            });
        
          html += `</div></section>`;
      
          productRecomm.innerHTML = html;  
          
          //insert element after "product_details"
          const reference = document.getElementById("product_details");        
          reference.after(productRecomm);
      
          var wishlistSnippet =  document.createElement('div');   
          wishlistSnippet.className = 'snippet-wishlist';
      
          wishlistcard = `<button type="button" aria-label="Add to wishlist" class="wishlist-badge" style="left:0;bottom:0;" button-wishlist data-product-handle="{{product.handle}}"><svg class="icon">{% render 'heart-badge' %}</svg></button>`;     
              
          wishlistSnippet.innerHTML = wishlistcard;
      
          const referenceTitle = document.getElementById("qty-part");        
          referenceTitle.after(wishlistSnippet);
          
          // Create a custom event and dispatch to setup PopUp Modal         
          let myEvent = new CustomEvent('dispatchPrd', {
              bubbles: true,
              cancelable: true
              });
      
          let myEventMeta = new CustomEvent('dispatchMeta', {
                bubbles: true,
                cancelable: true
                });

          setTimeout(()=>{
              document.dispatchEvent(myEvent);     
              initButtons();       
            },2)    
          clearTimeout(); 
          document.dispatchEvent(myEventMeta); 

        }   
        
    })
}  

</script>

{{ 'product.css' | asset_url | stylesheet_tag }}

{% comment %} <!-- / 
if show recommendations False (and no product is selected) ==> hide recommendations on all products 
if show recommendations False and a product is selected ==> hide recommendations on the selected product
product whislisht snippets always rendered in the template,
initButton is in the eventlistener
  --> {% endcomment %}
 
{% comment %}theme-check-enable{% endcomment %}
